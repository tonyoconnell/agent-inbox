---
import {
  Newspaper,
  Download,
  BookText,
  Shield,
  LayoutGrid,
  CreditCard,
  MessageSquare,
  Rocket,
  Lightbulb,
  Target,
  Clock,
  HelpCircle,
  DollarSign
} from "lucide-react";

// Course navigation items with anchor links
const courseNavigation = [
  { title: "Overview", path: "#overview", icon: Rocket },
  { title: "Key Features", path: "#framework", icon: Lightbulb },
  { title: "How It Works", path: "#how-it-works", icon: Clock },
  { title: "Modules", path: "#modules", icon: BookText },
  { title: "Pricing", path: "#pricing", icon: DollarSign },
  { title: "FAQ", path: "#faq", icon: HelpCircle },
];

// Main navigation items
const mainNavigation = [
  { title: "Chat", path: "/ai", icon: MessageSquare },
  { title: "Blog", path: "/blog", icon: Newspaper },
  { title: "Docs", path: "/docs", icon: BookText },
  { title: "Download", path: "/download", icon: Download },
  { title: "License", path: "/free-license", icon: Shield },
];

const currentPath = Astro.url.pathname;
const isCoursePage = currentPath === "/" || currentPath === "/course";
const navigationItems = isCoursePage ? courseNavigation : mainNavigation;
---

<aside
  class="hidden sm:flex fixed left-0 top-0 h-screen z-[var(--one-z-sidebar)] w-[var(--one-sidebar-width)] shrink-0 bg-[var(--one-background-nav)] border-r border-[var(--one-border)] transition-all duration-300 ease-in-out"
>
  <nav class="h-full flex flex-col bg-[var(--one-background-nav)]">
    <!-- Logo Section -->
    <div
      class="flex items-center justify-center bg-[hsla(0,0%,5%,0.8)]"
    >
      <a
        href="/"
        class="w-[var(--one-sidebar-width)] h-16 flex items-center justify-center hover:bg-[hsla(0,0%,1%,0.5)] transition-colors duration-200"
      >
        <div class="w-8 h-8">
          <img src="/icon.svg" alt="ONE Logo" class="w-full h-full" />
        </div>
      </a>
    </div>

    <!-- Navigation Items -->
    <div class="flex-1 flex flex-col">
      {
        navigationItems.map(({ title, path, icon: Icon }) => (
          <a
            href={path}
            class:list={[
              "w-[var(--one-sidebar-width)] h-16 flex items-center justify-center transition-colors duration-200 group relative",
              "hover:bg-[hsla(0,0%,14%,0.5)]",
              { "bg-[#1E3A8A]": currentPath === path || (isCoursePage && path === "#overview" && currentPath === "/") },
            ]}
            data-tooltip={title}
            aria-label={title}
          >
            <div class="w-5 h-5 flex items-center justify-center">
              <Icon
                className="w-full h-full text-foreground/60 group-hover:text-foreground/90 transition-colors"
                strokeWidth={1.25}
              />
            </div>
          </a>
        ))
      }
    </div>

    <!-- Chat Link (Replacing Theme Toggle) -->
    <div
      class="flex items-center justify-center bg-[var(--one-background-nav)]"
    >
      <a
        href="/ai"
        class="w-[var(--one-sidebar-width)] h-16 flex items-center justify-center hover:bg-[hsla(0,0%,14%,0.5)] transition-colors duration-200 group relative"
        data-tooltip="Chat with AI"
        aria-label="Chat with AI"
      >
        <div class="w-5 h-5 flex items-center justify-center">
          <MessageSquare
            className="w-full h-full text-foreground/60 group-hover:text-foreground/90 transition-colors"
            strokeWidth={1.25}
          />
        </div>
      </a>
    </div>
  </nav>
</aside>

<style>
  [data-tooltip] {
    position: relative;
  }

  [data-tooltip]:hover::after {
    content: attr(data-tooltip);
    position: absolute;
    left: 100%;
    top: 50%;
    transform: translateY(-50%);
    background: var(--one-background-nav);
    color: var(--one-foreground);
    padding: 0.5rem 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    white-space: nowrap;
    z-index: 50;
    margin-left: 0.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.03);
    opacity: 0;
    animation: tooltip 0.2s ease-out forwards;
    border: 1px solid var(--one-border);
    backdrop-filter: blur(8px);
  }

  @keyframes tooltip {
    from {
      opacity: 0;
      transform: translate(0, -50%) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translate(0, -50%) scale(1);
    }
  }
</style>

<script>
  // Smooth scroll for anchor links
  document.querySelectorAll('a[href^="#"]').forEach((element) => {
    const anchor = element as HTMLAnchorElement;
    anchor.addEventListener('click', function(e: Event) {
      e.preventDefault();
      const href = this.getAttribute('href');
      if (href) {
        const targetElement = document.querySelector(href);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Update URL without jumping
          history.pushState(null, '', href);

          // Update active state manually
          document.querySelectorAll('a[href^="#"]').forEach(link => {
            link.classList.remove('bg-[#1E3A8A]');
          });
          this.classList.add('bg-[#1E3A8A]');
        }
      }
    });
  });

  // Highlight current section in sidebar
  const observerOptions = {
    root: null,
    rootMargin: '-20% 0px -70% 0px', // Adjust the margins to make detection more accurate
    threshold: [0, 0.2, 0.4, 0.6, 0.8, 1] // Multiple thresholds for better accuracy
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting && entry.intersectionRatio > 0.6) { // Only trigger when section is more than 60% visible
        const id = entry.target.id;
        const sidebarLink = document.querySelector(`a[href="#${id}"]`);
        
        // Remove active class from all links
        document.querySelectorAll('a[href^="#"]').forEach(link => {
          link.classList.remove('bg-[#1E3A8A]');
        });
        
        // Add active class to current link
        if (sidebarLink) {
          sidebarLink.classList.add('bg-[#1E3A8A]');
        }
      }
    });
  }, observerOptions);

  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    // Observe all sections
    const sections = document.querySelectorAll('section[id]');
    sections.forEach(section => {
      observer.observe(section);
    });

    // Set initial active state based on URL hash or first section
    const hash = window.location.hash;
    if (hash) {
      const activeLink = document.querySelector(`a[href="${hash}"]`);
      if (activeLink) {
        activeLink.classList.add('bg-[#1E3A8A]');
      }
    } else {
      const firstLink = document.querySelector('a[href^="#"]');
      if (firstLink) {
        firstLink.classList.add('bg-[#1E3A8A]');
      }
    }
  });
</script>
