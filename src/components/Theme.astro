---
// Theme.astro - Theme Initialization Component
// @ts-nocheck - Astro directives are not recognized by TypeScript
---

<script is:inline>
  function getThemePreference() {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      const stored = localStorage.getItem('theme');
      if (['light', 'dark', 'high-contrast'].includes(stored)) {
        return stored;
      }
    }
    
    // Check for system preference
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    
    // Default to dark theme to match the image
    return 'dark';
  }
  
  function setTheme(theme) {
    const root = document.documentElement;
    
    // Remove all theme classes
    root.classList.remove('light', 'dark', 'high-contrast');
    
    // Add the selected theme class (except for light which is the default)
    if (theme !== 'light') {
      root.classList.add(theme);
    }
    
    // Set data-theme attribute for CSS selectors
    root.setAttribute('data-theme', theme);
    
    // Store in localStorage
    localStorage.setItem('theme', theme);

    // Dispatch event for React components
    window.dispatchEvent(new CustomEvent('theme-change', { detail: theme }));
  }

  // Initialize theme
  setTheme(getThemePreference());

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    const currentTheme = localStorage.getItem('theme');
    if (!currentTheme || currentTheme === 'system') {
      setTheme(e.matches ? 'dark' : 'light');
    }
  });

  // Expose theme functions to window
  window.setTheme = setTheme;
  window.getThemePreference = getThemePreference;
  
  // Cycle to the next theme
  window.cycleTheme = function() {
    const currentTheme = getThemePreference();
    
    switch (currentTheme) {
      case 'light':
        setTheme('dark');
        break;
      case 'dark':
        setTheme('high-contrast');
        break;
      case 'high-contrast':
        setTheme('light');
        break;
      default:
        setTheme('dark');
    }
  };

  // Listen for theme changes from React components
  document.addEventListener('set-theme', (e) => {
    if (e.detail && typeof e.detail === 'string') {
      setTheme(e.detail);
    }
  });
</script>

<style>
  /* Initialization styles to prevent flash */
  :root {
    color-scheme: dark;
  }

  :root.light, :root[data-theme="light"] {
    color-scheme: light;
  }

  :root.dark, :root[data-theme="dark"] {
    color-scheme: dark;
  }

  :root.high-contrast, :root[data-theme="high-contrast"] {
    color-scheme: dark;
  }
</style>
